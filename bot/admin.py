from vkbottle.bot import Message
from database.db import Database
import re


class AdminCommands:
    """Handler for admin commands."""

    def __init__(self, db: Database):
        self.db = db

    async def handle_command(self, message: Message, command: str, args: str) -> str:
        """Route and handle admin commands."""
        peer_id = message.peer_id
        user_id = message.from_id

        # Check if user is admin (except for first initialization)
        is_admin = await self.db.is_admin(peer_id, user_id)

        # Command handlers
        if command == "–ø–æ–º–æ—â—å" or command == "help":
            return self._help_message(is_admin)

        if command == "–∫–æ–º–∞–Ω–¥—ã":
            return self._help_message(is_admin)

        # Admin-only commands
        if not is_admin:
            return "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞."

        if command == "–¥–æ–±–∞–≤–∏—Ç—å_–∞–¥–º–∏–Ω–∞":
            return await self._add_admin(peer_id, args)

        elif command == "—É–¥–∞–ª–∏—Ç—å_–∞–¥–º–∏–Ω–∞":
            return await self._remove_admin(peer_id, args)

        elif command == "—Å–ø–∏—Å–æ–∫_–∞–¥–º–∏–Ω–æ–≤":
            return await self._list_admins(peer_id)

        elif command == "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_—Ä–æ–ª—å":
            return await self._set_brain_role(peer_id, args)

        elif command == "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–∑–∞–¥–∞—á—É":
            return await self._set_brain_task(peer_id, args)

        elif command == "—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–º–æ–∑–≥–∏":
            return await self._set_brain_combined(peer_id, args)

        elif command == "–¥–ª–∏–Ω–∞_–æ—Ç–≤–µ—Ç–æ–≤":
            return await self._set_response_length(peer_id, args)

        elif command == "–ø—Ä–æ—Ü–µ–Ω—Ç_–æ—Ç–≤–µ—Ç–æ–≤":
            return await self._set_response_percentage(peer_id, args)

        elif command == "—Ä–∞–∑–º–µ—Ä_–ø–∞–º—è—Ç–∏":
            return await self._set_memory_size(peer_id, args)

        elif command == "–¥–æ–±–∞–≤–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            return await self._add_tracked_user(peer_id, args)

        elif command == "—É–¥–∞–ª–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            return await self._remove_tracked_user(peer_id, args)

        elif command == "—Å–ø–∏—Å–æ–∫_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
            return await self._list_tracked_users(peer_id)

        elif command == "—Å—Ç–∞—Ç—É—Å":
            return await self._show_status(peer_id)

        return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–ø–æ–º–æ—â—å –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."

    def _help_message(self, is_admin: bool) -> str:
        """Generate help message."""
        base_help = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**

**–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:**
!–ø–æ–º–æ—â—å - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
!–∫–æ–º–∞–Ω–¥—ã - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
!—Å—Ç–∞—Ç—É—Å - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
"""

        if not is_admin:
            return base_help + "\n‚ùó –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."

        admin_help = """
**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:**
!–¥–æ–±–∞–≤–∏—Ç—å_–∞–¥–º–∏–Ω–∞ [id] - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
!—É–¥–∞–ª–∏—Ç—å_–∞–¥–º–∏–Ω–∞ [id] - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
!—Å–ø–∏—Å–æ–∫_–∞–¥–º–∏–Ω–æ–≤ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤

**–ù–∞—Å—Ç—Ä–æ–π–∫–∞ "–º–æ–∑–≥–æ–≤":**
!—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_—Ä–æ–ª—å [—Ç–µ–∫—Å—Ç] - –∑–∞–¥–∞—Ç—å —Ä–æ–ª—å –±–æ—Ç–∞
!—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–∑–∞–¥–∞—á—É [—Ç–µ–∫—Å—Ç] - –∑–∞–¥–∞—Ç—å –∑–∞–¥–∞—á—É –±–æ—Ç–∞
!—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–º–æ–∑–≥–∏ [—Ä–æ–ª—å] | [–∑–∞–¥–∞—á–∞] - –∑–∞–¥–∞—Ç—å —Ä–æ–ª—å –∏ –∑–∞–¥–∞—á—É –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤:**
!–¥–ª–∏–Ω–∞_–æ—Ç–≤–µ—Ç–æ–≤ [short/medium/long] - –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤
!–ø—Ä–æ—Ü–µ–Ω—Ç_–æ—Ç–≤–µ—Ç–æ–≤ [1-100] - –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
!—Ä–∞–∑–º–µ—Ä_–ø–∞–º—è—Ç–∏ [—á–∏—Å–ª–æ] - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:**
!–¥–æ–±–∞–≤–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [id] - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
!—É–¥–∞–ª–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [id] - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
!—Å–ø–∏—Å–æ–∫_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**–ü—Ä–∏–º–µ—Ä—ã:**
!—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_—Ä–æ–ª—å –Ø –≤–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–∑–æ–≤–∏–∫–∞ —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º
!—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–∑–∞–¥–∞—á—É –Ø –ø–∏—à—É –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–∫–æ—Ä–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è –∑–∞ —Ä—É–ª–µ–º
!–¥–ª–∏–Ω–∞_–æ—Ç–≤–µ—Ç–æ–≤ medium
!–ø—Ä–æ—Ü–µ–Ω—Ç_–æ—Ç–≤–µ—Ç–æ–≤ 50
!–¥–æ–±–∞–≤–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123456789
"""
        return base_help + admin_help

    async def _add_admin(self, peer_id: int, args: str) -> str:
        """Add admin."""
        match = re.search(r'\[id(\d+)\|', args) or re.search(r'id(\d+)', args) or re.search(r'(\d+)', args)
        if not match:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: !–¥–æ–±–∞–≤–∏—Ç—å_–∞–¥–º–∏–Ω–∞ 123456789"

        user_id = int(match.group(1))
        await self.db.add_admin(peer_id, user_id)
        return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{user_id}|@id{user_id}] –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã."

    async def _remove_admin(self, peer_id: int, args: str) -> str:
        """Remove admin."""
        match = re.search(r'\[id(\d+)\|', args) or re.search(r'id(\d+)', args) or re.search(r'(\d+)', args)
        if not match:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: !—É–¥–∞–ª–∏—Ç—å_–∞–¥–º–∏–Ω–∞ 123456789"

        user_id = int(match.group(1))
        await self.db.remove_admin(peer_id, user_id)
        return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{user_id}|@id{user_id}] —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."

    async def _list_admins(self, peer_id: int) -> str:
        """List admins."""
        config = await self.db.get_or_create_conversation(peer_id, 0)
        import json
        admins = json.loads(config['admins'])

        if not admins:
            return "üìã –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã."

        admin_list = "\n".join([f"- [id{uid}|@id{uid}]" for uid in admins])
        return f"üìã **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–µ—Å–µ–¥—ã:**\n{admin_list}"

    async def _set_brain_role(self, peer_id: int, args: str) -> str:
        """Set brain role."""
        if not args.strip():
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ä–æ–ª—å. –ü—Ä–∏–º–µ—Ä: !—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_—Ä–æ–ª—å –Ø –≤–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–∑–æ–≤–∏–∫–∞"

        await self.db.update_conversation(peer_id, brain_role=args.strip())
        return f"‚úÖ –†–æ–ª—å –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {args.strip()}"

    async def _set_brain_task(self, peer_id: int, args: str) -> str:
        """Set brain task."""
        if not args.strip():
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É. –ü—Ä–∏–º–µ—Ä: !—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–∑–∞–¥–∞—á—É –°–∫–æ—Ä–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è –∑–∞ —Ä—É–ª–µ–º"

        await self.db.update_conversation(peer_id, brain_task=args.strip())
        return f"‚úÖ –ó–∞–¥–∞—á–∞ –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {args.strip()}"

    async def _set_brain_combined(self, peer_id: int, args: str) -> str:
        """Set brain role and task together."""
        if '|' not in args:
            return "‚ùå –†–∞–∑–¥–µ–ª–∏—Ç–µ —Ä–æ–ª—å –∏ –∑–∞–¥–∞—á—É —Å–∏–º–≤–æ–ª–æ–º |. –ü—Ä–∏–º–µ—Ä: !—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_–º–æ–∑–≥–∏ –í–æ–¥–∏—Ç–µ–ª—å –≥—Ä—É–∑–æ–≤–∏–∫–∞ | –°–∫–æ—Ä–æ—Ç–∞—Ç—å –≤—Ä–µ–º—è"

        parts = args.split('|', 1)
        role = parts[0].strip()
        task = parts[1].strip()

        await self.db.update_conversation(peer_id, brain_role=role, brain_task=task)
        return f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n–†–æ–ª—å: {role}\n–ó–∞–¥–∞—á–∞: {task}"

    async def _set_response_length(self, peer_id: int, args: str) -> str:
        """Set response length."""
        length = args.strip().lower()
        if length not in ['short', 'medium', 'long']:
            return "‚ùå –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: short, medium, long"

        await self.db.update_conversation(peer_id, response_length=length)
        return f"‚úÖ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {length}"

    async def _set_response_percentage(self, peer_id: int, args: str) -> str:
        """Set response percentage."""
        try:
            percentage = int(args.strip())
            if not 1 <= percentage <= 100:
                raise ValueError
        except ValueError:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100"

        await self.db.update_conversation(peer_id, response_percentage=percentage)
        return f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {percentage}%"

    async def _set_memory_size(self, peer_id: int, args: str) -> str:
        """Set memory size."""
        try:
            size = int(args.strip())
            if size < 1:
                raise ValueError
        except ValueError:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"

        await self.db.update_conversation(peer_id, memory_size=size)
        return f"‚úÖ –†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {size} —Å–æ–æ–±—â–µ–Ω–∏–π"

    async def _add_tracked_user(self, peer_id: int, args: str) -> str:
        """Add tracked user."""
        match = re.search(r'\[id(\d+)\|', args) or re.search(r'id(\d+)', args) or re.search(r'(\d+)', args)
        if not match:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: !–¥–æ–±–∞–≤–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123456789"

        user_id = int(match.group(1))
        await self.db.add_tracked_user(peer_id, user_id)
        return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{user_id}|@id{user_id}] –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."

    async def _remove_tracked_user(self, peer_id: int, args: str) -> str:
        """Remove tracked user."""
        match = re.search(r'\[id(\d+)\|', args) or re.search(r'id(\d+)', args) or re.search(r'(\d+)', args)
        if not match:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: !—É–¥–∞–ª–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 123456789"

        user_id = int(match.group(1))
        await self.db.remove_tracked_user(peer_id, user_id)
        return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [id{user_id}|@id{user_id}] —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."

    async def _list_tracked_users(self, peer_id: int) -> str:
        """List tracked users."""
        users = await self.db.get_tracked_users(peer_id)

        if not users:
            return "üìã –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !–¥–æ–±–∞–≤–∏—Ç—å_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

        user_list = "\n".join([f"- [id{uid}|@id{uid}]" for uid in users])
        return f"üìã **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n{user_list}"

    async def _show_status(self, peer_id: int) -> str:
        """Show current bot configuration."""
        config = await self.db.get_or_create_conversation(peer_id, 0)
        import json

        admins = json.loads(config['admins'])
        tracked_users = await self.db.get_tracked_users(peer_id)

        status = f"""üìä **–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:**

**–†–æ–ª—å:** {config.get('brain_role') or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}
**–ó–∞–¥–∞—á–∞:** {config.get('brain_task') or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}
**–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–æ–≤:** {config.get('response_length', 'medium')}
**–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–≤–µ—Ç–æ–≤:** {config.get('response_percentage', 100)}%
**–†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏:** {config.get('memory_size', 10)} —Å–æ–æ–±—â–µ–Ω–∏–π
**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–æ–≤:** {len(admins)}
**–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(tracked_users)}
"""
        return status
